class ModelWithManyLists {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('List'))throw new TypeError("Given object is expected to have a property with name: 'List'."); if (!value.hasOwnProperty('HashSet'))throw new TypeError("Given object is expected to have a property with name: 'HashSet'."); if (!value.hasOwnProperty('Enumerable'))throw new TypeError("Given object is expected to have a property with name: 'Enumerable'."); if (!value.hasOwnProperty('Collection'))throw new TypeError("Given object is expected to have a property with name: 'Collection'."); if (!value.hasOwnProperty('ReadOnlyList'))throw new TypeError("Given object is expected to have a property with name: 'ReadOnlyList'."); if (!value.hasOwnProperty('Dictionary'))throw new TypeError("Given object is expected to have a property with name: 'Dictionary'."); if (typeof (value['List']) !== 'object')throw new TypeError("Given object property 'List' is expected to be a object.");if (typeof (value['HashSet']) !== 'object')throw new TypeError("Given object property 'HashSet' is expected to be a object.");if (typeof (value['Enumerable']) !== 'object')throw new TypeError("Given object property 'Enumerable' is expected to be a object.");if (typeof (value['Collection']) !== 'object')throw new TypeError("Given object property 'Collection' is expected to be a object.");if (typeof (value['ReadOnlyList']) !== 'object')throw new TypeError("Given object property 'ReadOnlyList' is expected to be a object.");if (typeof (value['Dictionary']) !== 'object')throw new TypeError("Given object property 'Dictionary' is expected to be a object.");}if (value === void 0 || value === null)value = {};this.List = value.List || [];this.HashSet = value.HashSet || [];this.Enumerable = value.Enumerable || [];this.Collection = value.Collection || [];this.ReadOnlyList = value.ReadOnlyList || [];this.Dictionary = value.Dictionary || {};}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('List'))throw new TypeError("Given object is expected to have a property with name: 'List'."); if (!value.hasOwnProperty('HashSet'))throw new TypeError("Given object is expected to have a property with name: 'HashSet'."); if (!value.hasOwnProperty('Enumerable'))throw new TypeError("Given object is expected to have a property with name: 'Enumerable'."); if (!value.hasOwnProperty('Collection'))throw new TypeError("Given object is expected to have a property with name: 'Collection'."); if (!value.hasOwnProperty('ReadOnlyList'))throw new TypeError("Given object is expected to have a property with name: 'ReadOnlyList'."); if (!value.hasOwnProperty('Dictionary'))throw new TypeError("Given object is expected to have a property with name: 'Dictionary'."); if (typeof (value['List']) !== 'object')throw new TypeError("Given object property 'List' is expected to be a object.");if (typeof (value['HashSet']) !== 'object')throw new TypeError("Given object property 'HashSet' is expected to be a object.");if (typeof (value['Enumerable']) !== 'object')throw new TypeError("Given object property 'Enumerable' is expected to be a object.");if (typeof (value['Collection']) !== 'object')throw new TypeError("Given object property 'Collection' is expected to be a object.");if (typeof (value['ReadOnlyList']) !== 'object')throw new TypeError("Given object property 'ReadOnlyList' is expected to be a object.");if (typeof (value['Dictionary']) !== 'object')throw new TypeError("Given object property 'Dictionary' is expected to be a object.");return true;}catch (exc) {console.warn(exc);return false;}}}
class NameModel {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Insertion'))throw new TypeError("Given object is expected to have a property with name: 'Insertion'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Insertion']) !== 'string')throw new TypeError("Given object property 'Insertion' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");}if (value === void 0 || value === null)value = {};this.Name = value.Name || "Jeroen";this.Insertion = value.Insertion || '';this.Surname = value.Surname || "Vorsselman";}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Insertion'))throw new TypeError("Given object is expected to have a property with name: 'Insertion'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Insertion']) !== 'string')throw new TypeError("Given object property 'Insertion' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");return true;}catch (exc) {console.warn(exc);return false;}}}
class PersonReferenceToUser {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Insertion'))throw new TypeError("Given object is expected to have a property with name: 'Insertion'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (!value.hasOwnProperty('User'))throw new TypeError("Given object is expected to have a property with name: 'User'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Insertion']) !== 'string')throw new TypeError("Given object property 'Insertion' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");if (typeof (value['User']) !== 'object')throw new TypeError("Given object property 'User' is expected to be a object.");if (!(value['User'] === void 0 || value['User'] === null) && !(value['User'] instanceof UserReferenceToPerson))throw new TypeError("Given object property 'User' is expected to be an instance of the 'UserReferenceToPerson' constructor.");}if (value === void 0 || value === null)value = {};this.Name = value.Name || '';this.Insertion = value.Insertion || '';this.Surname = value.Surname || '';this.User = value.User || null;}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Insertion'))throw new TypeError("Given object is expected to have a property with name: 'Insertion'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (!value.hasOwnProperty('User'))throw new TypeError("Given object is expected to have a property with name: 'User'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Insertion']) !== 'string')throw new TypeError("Given object property 'Insertion' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");if (typeof (value['User']) !== 'object')throw new TypeError("Given object property 'User' is expected to be a object.");if (!(value['User'] === void 0 || value['User'] === null) && !(value['User'] instanceof UserReferenceToPerson))throw new TypeError("Given object property 'User' is expected to be an instance of the 'UserReferenceToPerson' constructor.");return true;}catch (exc) {console.warn(exc);return false;}}}
class UserReferenceToPerson {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('RegisteredOn'))throw new TypeError("Given object is expected to have a property with name: 'RegisteredOn'."); if (!value.hasOwnProperty('Guid'))throw new TypeError("Given object is expected to have a property with name: 'Guid'."); if (!value.hasOwnProperty('Username'))throw new TypeError("Given object is expected to have a property with name: 'Username'."); if (!value.hasOwnProperty('Password'))throw new TypeError("Given object is expected to have a property with name: 'Password'."); if (!value.hasOwnProperty('Person'))throw new TypeError("Given object is expected to have a property with name: 'Person'."); if (typeof (value['RegisteredOn']) !== 'object')throw new TypeError("Given object property 'RegisteredOn' is expected to be a object.");if (typeof (value['Guid']) !== 'object')throw new TypeError("Given object property 'Guid' is expected to be a object.");if (typeof (value['Username']) !== 'string')throw new TypeError("Given object property 'Username' is expected to be a string.");if (typeof (value['Password']) !== 'string')throw new TypeError("Given object property 'Password' is expected to be a string.");if (typeof (value['Person']) !== 'object')throw new TypeError("Given object property 'Person' is expected to be a object.");if (!(value['Person'] === void 0 || value['Person'] === null) && !(value['Person'] instanceof PersonReferenceToUser))throw new TypeError("Given object property 'Person' is expected to be an instance of the 'PersonReferenceToUser' constructor.");}if (value === void 0 || value === null)value = {};this.RegisteredOn = value.RegisteredOn || "2018-03-22T13:45:36.6318753+01:00";this.Guid = value.Guid || "00000000-0000-0000-0000-000000000000";this.Username = value.Username || "MrAwesome";this.Password = value.Password || "Secret";this.Person = value.Person || null;}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('RegisteredOn'))throw new TypeError("Given object is expected to have a property with name: 'RegisteredOn'."); if (!value.hasOwnProperty('Guid'))throw new TypeError("Given object is expected to have a property with name: 'Guid'."); if (!value.hasOwnProperty('Username'))throw new TypeError("Given object is expected to have a property with name: 'Username'."); if (!value.hasOwnProperty('Password'))throw new TypeError("Given object is expected to have a property with name: 'Password'."); if (!value.hasOwnProperty('Person'))throw new TypeError("Given object is expected to have a property with name: 'Person'."); if (typeof (value['RegisteredOn']) !== 'object')throw new TypeError("Given object property 'RegisteredOn' is expected to be a object.");if (typeof (value['Guid']) !== 'object')throw new TypeError("Given object property 'Guid' is expected to be a object.");if (typeof (value['Username']) !== 'string')throw new TypeError("Given object property 'Username' is expected to be a string.");if (typeof (value['Password']) !== 'string')throw new TypeError("Given object property 'Password' is expected to be a string.");if (typeof (value['Person']) !== 'object')throw new TypeError("Given object property 'Person' is expected to be a object.");if (!(value['Person'] === void 0 || value['Person'] === null) && !(value['Person'] instanceof PersonReferenceToUser))throw new TypeError("Given object property 'Person' is expected to be an instance of the 'PersonReferenceToUser' constructor.");return true;}catch (exc) {console.warn(exc);return false;}}}
class TypeModel {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Number'))throw new TypeError("Given object is expected to have a property with name: 'Number'."); if (!value.hasOwnProperty('Decimal'))throw new TypeError("Given object is expected to have a property with name: 'Decimal'."); if (!value.hasOwnProperty('Value'))throw new TypeError("Given object is expected to have a property with name: 'Value'."); if (!value.hasOwnProperty('Char'))throw new TypeError("Given object is expected to have a property with name: 'Char'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Number']) !== 'number')throw new TypeError("Given object property 'Number' is expected to be a number.");if (typeof (value['Decimal']) !== 'number')throw new TypeError("Given object property 'Decimal' is expected to be a number.");if (typeof (value['Value']) !== 'boolean')throw new TypeError("Given object property 'Value' is expected to be a boolean.");if (typeof (value['Char']) !== 'string')throw new TypeError("Given object property 'Char' is expected to be a string.");}if (value === void 0 || value === null)value = {};this.Name = value.Name || "Jeroen";this.Number = value.Number || 1337;this.Decimal = value.Decimal || 1.47;this.Value = value.Value || true;this.Char = value.Char || "a";}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Number'))throw new TypeError("Given object is expected to have a property with name: 'Number'."); if (!value.hasOwnProperty('Decimal'))throw new TypeError("Given object is expected to have a property with name: 'Decimal'."); if (!value.hasOwnProperty('Value'))throw new TypeError("Given object is expected to have a property with name: 'Value'."); if (!value.hasOwnProperty('Char'))throw new TypeError("Given object is expected to have a property with name: 'Char'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Number']) !== 'number')throw new TypeError("Given object property 'Number' is expected to be a number.");if (typeof (value['Decimal']) !== 'number')throw new TypeError("Given object property 'Decimal' is expected to be a number.");if (typeof (value['Value']) !== 'boolean')throw new TypeError("Given object property 'Value' is expected to be a boolean.");if (typeof (value['Char']) !== 'string')throw new TypeError("Given object property 'Char' is expected to be a string.");return true;}catch (exc) {console.warn(exc);return false;}}}
class Gender {constructor(value) {if (value !== void 0 && value !== null) {}if (value === void 0 || value === null)value = {};}static tryParse(value) {try {if (value === void 0 || value === null)return false; return true;}catch (exc) {console.warn(exc);return false;}}}
class PersonModel {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");}if (value === void 0 || value === null)value = {};this.Name = value.Name || "Jeroen";this.Surname = value.Surname || "Vorsselman";}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");return true;}catch (exc) {console.warn(exc);return false;}}}
class StudentModel extends PersonModel {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('Grade'))throw new TypeError("Given object is expected to have a property with name: 'Grade'."); if (!value.hasOwnProperty('School'))throw new TypeError("Given object is expected to have a property with name: 'School'."); if (!value.hasOwnProperty('Gender'))throw new TypeError("Given object is expected to have a property with name: 'Gender'."); if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (typeof (value['Grade']) !== 'number')throw new TypeError("Given object property 'Grade' is expected to be a number.");if (typeof (value['School']) !== 'string')throw new TypeError("Given object property 'School' is expected to be a string.");if (typeof (value['Gender']) !== 'number')throw new TypeError("Given object property 'Gender' is expected to be a number.");if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");}if (value === void 0 || value === null)value = {};this.Grade = value.Grade || 9;this.School = value.School || "Sint Jan";this.Gender = value.Gender || 0;this.Name = value.Name || "Jeroen";this.Surname = value.Surname || "Vorsselman";}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('Grade'))throw new TypeError("Given object is expected to have a property with name: 'Grade'."); if (!value.hasOwnProperty('School'))throw new TypeError("Given object is expected to have a property with name: 'School'."); if (!value.hasOwnProperty('Gender'))throw new TypeError("Given object is expected to have a property with name: 'Gender'."); if (!value.hasOwnProperty('Name'))throw new TypeError("Given object is expected to have a property with name: 'Name'."); if (!value.hasOwnProperty('Surname'))throw new TypeError("Given object is expected to have a property with name: 'Surname'."); if (typeof (value['Grade']) !== 'number')throw new TypeError("Given object property 'Grade' is expected to be a number.");if (typeof (value['School']) !== 'string')throw new TypeError("Given object property 'School' is expected to be a string.");if (typeof (value['Gender']) !== 'number')throw new TypeError("Given object property 'Gender' is expected to be a number.");if (typeof (value['Name']) !== 'string')throw new TypeError("Given object property 'Name' is expected to be a string.");if (typeof (value['Surname']) !== 'string')throw new TypeError("Given object property 'Surname' is expected to be a string.");return true;}catch (exc) {console.warn(exc);return false;}}}
class DoNotIgnoreMe extends IgnoreTestRoot {constructor(value) {if (value !== void 0 && value !== null) {if (!value.hasOwnProperty('ShouldExist'))throw new TypeError("Given object is expected to have a property with name: 'ShouldExist'."); if (typeof (value['ShouldExist']) !== 'string')throw new TypeError("Given object property 'ShouldExist' is expected to be a string.");}if (value === void 0 || value === null)value = {};this.ShouldExist = value.ShouldExist || '';}static tryParse(value) {try {if (value === void 0 || value === null)return false; if (!value.hasOwnProperty('ShouldExist'))throw new TypeError("Given object is expected to have a property with name: 'ShouldExist'."); if (typeof (value['ShouldExist']) !== 'string')throw new TypeError("Given object property 'ShouldExist' is expected to be a string.");return true;}catch (exc) {console.warn(exc);return false;}}}
class IgnoreTestRoot {constructor(value) {if (value !== void 0 && value !== null) {}if (value === void 0 || value === null)value = {};}static tryParse(value) {try {if (value === void 0 || value === null)return false; return true;}catch (exc) {console.warn(exc);return false;}}}
